// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/mocker/usecase.go

// Package server is a generated GoMock package.
package server

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/maykonlf/mocker/internal/model/entities"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ConfigRouter mocks base method
func (m *MockUseCase) ConfigRouter(config *entities.MockerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRouter", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigRouter indicates an expected call of ConfigRouter
func (mr *MockUseCaseMockRecorder) ConfigRouter(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRouter", reflect.TypeOf((*MockUseCase)(nil).ConfigRouter), config)
}
