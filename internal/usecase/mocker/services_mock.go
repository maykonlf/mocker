// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/mocker/services.go

// Package mocker is a generated GoMock package.
package mocker

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/maykonlf/mocker/internal/model/entities"
	reflect "reflect"
)

// MockHTTPRouter is a mock of HTTPRouter interface
type MockHTTPRouter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRouterMockRecorder
}

// MockHTTPRouterMockRecorder is the mock recorder for MockHTTPRouter
type MockHTTPRouterMockRecorder struct {
	mock *MockHTTPRouter
}

// NewMockHTTPRouter creates a new mock instance
func NewMockHTTPRouter(ctrl *gomock.Controller) *MockHTTPRouter {
	mock := &MockHTTPRouter{ctrl: ctrl}
	mock.recorder = &MockHTTPRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPRouter) EXPECT() *MockHTTPRouterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockHTTPRouter) Set(route, method string, response *entities.APIResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", route, method, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockHTTPRouterMockRecorder) Set(route, method, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHTTPRouter)(nil).Set), route, method, response)
}
